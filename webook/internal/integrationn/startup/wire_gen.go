// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package startup

import (
	repository2 "github.com/basic-go-project-webook/webook/interactive/repository"
	cache2 "github.com/basic-go-project-webook/webook/interactive/repository/cache"
	dao2 "github.com/basic-go-project-webook/webook/interactive/repository/dao"
	service2 "github.com/basic-go-project-webook/webook/interactive/service"
	"github.com/basic-go-project-webook/webook/internal/repository"
	article2 "github.com/basic-go-project-webook/webook/internal/repository/article"
	"github.com/basic-go-project-webook/webook/internal/repository/cache"
	"github.com/basic-go-project-webook/webook/internal/repository/dao"
	"github.com/basic-go-project-webook/webook/internal/repository/dao/article"
	"github.com/basic-go-project-webook/webook/internal/service"
	"github.com/basic-go-project-webook/webook/internal/web"
	"github.com/basic-go-project-webook/webook/internal/web/jwt"
	"github.com/basic-go-project-webook/webook/ioc"
	"github.com/gin-gonic/gin"
)

// Injectors from wire.go:

func InitWebServer() *gin.Engine {
	cmdable := ioc.InitRedis()
	handler := jwt.NewRedisJwtHandler(cmdable)
	v := ioc.InitGinMiddlewares(cmdable, handler)
	db := ioc.InitDBDefault()
	userDAO := dao.NewUserDAO(db)
	userCache := cache.NewUserCache(cmdable)
	userRepository := repository.NewUserRepository(userDAO, userCache)
	userService := service.NewUserService(userRepository)
	codeCache := cache.NewCodeCache(cmdable)
	codeRepository := repository.NewCodeRepository(codeCache)
	smsService := ioc.InitSMSService()
	codeService := service.NewCodeService(codeRepository, smsService)
	userHandle := web.NewUserHandle(userService, codeService, cmdable, handler)
	wechatService := ioc.InitOAuth2WechatService()
	oAuth2WechatHandler := web.NewOAuth2WechatHandler(wechatService, userService, handler)
	articleDAO := article.NewArticleDAO(db)
	articleCache := cache.NewRedisArticleCache(cmdable)
	articleRepository := article2.NewArticleRepository(articleDAO, articleCache, userRepository)
	producer := ioc.InitProducer()
	articleService := service.NewArticleService(articleRepository, producer)
	interactiveDAO := dao2.NewGORMInteractiveDAO(db)
	interactiveCache := cache2.NewInteractiveRedisCache(cmdable)
	interactiveRepository := repository2.NewCachedInteractiveRepository(interactiveDAO, interactiveCache)
	interactiveService := service2.NewInteractiveService(interactiveRepository)
	articleHandle := web.NewArticleHandle(articleService, handler, interactiveService)
	engine := ioc.InitWebserver(v, userHandle, oAuth2WechatHandler, articleHandle)
	return engine
}
